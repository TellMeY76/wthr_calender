"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const defaultAuth = "opV_P5";
const api_1 = require("../configs/api");
class ApiFetch {
    constructor(params) {
        this.withBaseURL = params.withBaseURL || false;
        this.baseURL = params.baseURL;
        this.header = params.header;
    }
    fetch(method, url, data, noTokenRequired, showLoading) {
        const _this = this;
        if (!noTokenRequired) {
            const loginData = wx.getStorageSync("loginData");
            const authToken = loginData
                ? loginData["unionId"]
                : wx.getStorageSync("unionId");
            _this.header.Authorization = authToken || _this.header.Authorization;
        }
        return new Promise((resolve, reject) => {
            wx.request({
                header: _this.header,
                data: data,
                url: _this.withBaseURL ? _this.baseURL + url : url,
                method: method || "GET",
                success(res) {
                    _this.judgeStatusCode(res.statusCode, reject);
                    if (typeof res.data !== undefined) {
                        resolve(res.data);
                    }
                },
                fail(e) {
                    wx.showToast({
                        title: `接口调用失败:${e.errMsg}`,
                        icon: "none"
                    });
                },
                complete() {
                    showLoading ? wx.hideLoading() : null;
                }
            });
        });
    }
    judgeStatusCode(statusCode, reject) {
        let hint;
        switch (statusCode) {
            case 404:
                hint = "服务器正在升级...";
                break;
            case 200:
                break;
            default:
                hint = `服务器正在维护中，请稍后再试！ 状态码：${statusCode}`;
        }
        if (hint) {
            wx.showToast({
                title: hint,
                icon: "none"
            });
            reject();
        }
    }
}
const fetchApi = new ApiFetch({
    baseURL: api_1.BaseUrl,
    withBaseURL: true,
    header: {
        "content-type": "application/json",
        Authorization: defaultAuth
    }
});
exports.fetchApi = fetchApi;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmV0Y2hBcGkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJmZXRjaEFwaS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLE1BQU0sV0FBVyxHQUFHLFFBQVEsQ0FBQztBQUM3Qix3Q0FBeUM7QUFpQnpDLE1BQU0sUUFBUTtJQUtaLFlBQVksTUFBaUI7UUFDM0IsSUFBSSxDQUFDLFdBQVcsR0FBRyxNQUFNLENBQUMsV0FBVyxJQUFJLEtBQUssQ0FBQztRQUMvQyxJQUFJLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUM7UUFDOUIsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDO0lBQzlCLENBQUM7SUFFRCxLQUFLLENBQ0gsTUFTYSxFQUNiLEdBQVcsRUFDWCxJQUFhLEVBQ2IsZUFBeUIsRUFDekIsV0FBcUI7UUFFckIsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDO1FBQ25CLElBQUksQ0FBQyxlQUFlLEVBQUU7WUFDcEIsTUFBTSxTQUFTLEdBQUcsRUFBRSxDQUFDLGNBQWMsQ0FBQyxXQUFXLENBQUMsQ0FBQztZQUNqRCxNQUFNLFNBQVMsR0FBRyxTQUFTO2dCQUN6QixDQUFDLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQztnQkFDdEIsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxjQUFjLENBQUMsU0FBUyxDQUFDLENBQUM7WUFDakMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxhQUFhLEdBQUcsU0FBUyxJQUFJLEtBQUssQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDO1NBQ3RFO1FBRUQsT0FBTyxJQUFJLE9BQU8sQ0FBQyxDQUFDLE9BQVksRUFBRSxNQUFXLEVBQUUsRUFBRTtZQUMvQyxFQUFFLENBQUMsT0FBTyxDQUFDO2dCQUNULE1BQU0sRUFBRSxLQUFLLENBQUMsTUFBTTtnQkFDcEIsSUFBSSxFQUFFLElBQUk7Z0JBQ1YsR0FBRyxFQUFFLEtBQUssQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHO2dCQUNsRCxNQUFNLEVBQUUsTUFBTSxJQUFJLEtBQUs7Z0JBQ3ZCLE9BQU8sQ0FBQyxHQUFpQjtvQkFDdkIsS0FBSyxDQUFDLGVBQWUsQ0FBQyxHQUFHLENBQUMsVUFBVSxFQUFFLE1BQU0sQ0FBQyxDQUFDO29CQUM5QyxJQUFJLE9BQU8sR0FBRyxDQUFDLElBQUksS0FBSyxTQUFTLEVBQUU7d0JBQ2pDLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7cUJBQ25CO2dCQUNILENBQUM7Z0JBQ0QsSUFBSSxDQUFDLENBQUM7b0JBQ0osRUFBRSxDQUFDLFNBQVMsQ0FBQzt3QkFDWCxLQUFLLEVBQUUsVUFBVSxDQUFDLENBQUMsTUFBTSxFQUFFO3dCQUMzQixJQUFJLEVBQUUsTUFBTTtxQkFDYixDQUFDLENBQUM7Z0JBQ0wsQ0FBQztnQkFDRCxRQUFRO29CQUNOLFdBQVcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7Z0JBQ3hDLENBQUM7YUFDRixDQUFDLENBQUM7UUFDTCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCxlQUFlLENBQUMsVUFBa0IsRUFBRSxNQUFXO1FBQzdDLElBQUksSUFBSSxDQUFDO1FBQ1QsUUFBUSxVQUFVLEVBQUU7WUFDbEIsS0FBSyxHQUFHO2dCQUNOLElBQUksR0FBRyxZQUFZLENBQUM7Z0JBQ3BCLE1BQU07WUFDUixLQUFLLEdBQUc7Z0JBQ04sTUFBTTtZQUNSO2dCQUNFLElBQUksR0FBRyx1QkFBdUIsVUFBVSxFQUFFLENBQUM7U0FDOUM7UUFDRCxJQUFJLElBQUksRUFBRTtZQUNSLEVBQUUsQ0FBQyxTQUFTLENBQUM7Z0JBQ1gsS0FBSyxFQUFFLElBQUk7Z0JBQ1gsSUFBSSxFQUFFLE1BQU07YUFDYixDQUFDLENBQUM7WUFDSCxNQUFNLEVBQUUsQ0FBQztTQUNWO0lBQ0gsQ0FBQztDQUNGO0FBRUQsTUFBTSxRQUFRLEdBQUcsSUFBSSxRQUFRLENBQUM7SUFDNUIsT0FBTyxFQUFFLGFBQU87SUFDaEIsV0FBVyxFQUFFLElBQUk7SUFDakIsTUFBTSxFQUFFO1FBQ04sY0FBYyxFQUFFLGtCQUFrQjtRQUNsQyxhQUFhLEVBQUUsV0FBVztLQUMzQjtDQUNGLENBQUMsQ0FBQztBQUVNLDRCQUFRIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgZGVmYXVsdEF1dGggPSBcIm9wVl9QNVwiO1xyXG5pbXBvcnQgeyBCYXNlVXJsIH0gZnJvbSBcIi4uL2NvbmZpZ3MvYXBpXCI7XHJcbmludGVyZmFjZSBBcGlQYXJhbXMge1xyXG4gIGJhc2VVUkw6IHN0cmluZztcclxuICBoZWFkZXI6IGh0dHBIZWFkZXI7XHJcbiAgd2l0aEJhc2VVUkw/OiBib29sZWFuO1xyXG59XHJcblxyXG5pbnRlcmZhY2UgaHR0cEhlYWRlciB7XHJcbiAgXCJjb250ZW50LXR5cGVcIjogc3RyaW5nO1xyXG4gIEF1dGhvcml6YXRpb246IHN0cmluZztcclxufVxyXG5cclxuaW50ZXJmYWNlIGh0dHBSZXNwb25zZSB7XHJcbiAgZGF0YTogYW55O1xyXG4gIHN0YXR1c0NvZGU6IG51bWJlcjtcclxufVxyXG5cclxuY2xhc3MgQXBpRmV0Y2gge1xyXG4gIHdpdGhCYXNlVVJMOiBib29sZWFuO1xyXG4gIGJhc2VVUkw6IHN0cmluZztcclxuICBoZWFkZXI6IGh0dHBIZWFkZXI7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHBhcmFtczogQXBpUGFyYW1zKSB7XHJcbiAgICB0aGlzLndpdGhCYXNlVVJMID0gcGFyYW1zLndpdGhCYXNlVVJMIHx8IGZhbHNlO1xyXG4gICAgdGhpcy5iYXNlVVJMID0gcGFyYW1zLmJhc2VVUkw7XHJcbiAgICB0aGlzLmhlYWRlciA9IHBhcmFtcy5oZWFkZXI7XHJcbiAgfVxyXG5cclxuICBmZXRjaChcclxuICAgIG1ldGhvZDpcclxuICAgICAgfCBcIkdFVFwiXHJcbiAgICAgIHwgXCJPUFRJT05TXCJcclxuICAgICAgfCBcIkhFQURcIlxyXG4gICAgICB8IFwiUE9TVFwiXHJcbiAgICAgIHwgXCJQVVRcIlxyXG4gICAgICB8IFwiREVMRVRFXCJcclxuICAgICAgfCBcIlRSQUNFXCJcclxuICAgICAgfCBcIkNPTk5FQ1RcIlxyXG4gICAgICB8IHVuZGVmaW5lZCxcclxuICAgIHVybDogc3RyaW5nLFxyXG4gICAgZGF0YT86IG9iamVjdCxcclxuICAgIG5vVG9rZW5SZXF1aXJlZD86IGJvb2xlYW4sXHJcbiAgICBzaG93TG9hZGluZz86IGJvb2xlYW5cclxuICApIHtcclxuICAgIGNvbnN0IF90aGlzID0gdGhpcztcclxuICAgIGlmICghbm9Ub2tlblJlcXVpcmVkKSB7XHJcbiAgICAgIGNvbnN0IGxvZ2luRGF0YSA9IHd4LmdldFN0b3JhZ2VTeW5jKFwibG9naW5EYXRhXCIpO1xyXG4gICAgICBjb25zdCBhdXRoVG9rZW4gPSBsb2dpbkRhdGFcclxuICAgICAgICA/IGxvZ2luRGF0YVtcInVuaW9uSWRcIl1cclxuICAgICAgICA6IHd4LmdldFN0b3JhZ2VTeW5jKFwidW5pb25JZFwiKTtcclxuICAgICAgX3RoaXMuaGVhZGVyLkF1dGhvcml6YXRpb24gPSBhdXRoVG9rZW4gfHwgX3RoaXMuaGVhZGVyLkF1dGhvcml6YXRpb247XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlOiBhbnksIHJlamVjdDogYW55KSA9PiB7XHJcbiAgICAgIHd4LnJlcXVlc3Qoe1xyXG4gICAgICAgIGhlYWRlcjogX3RoaXMuaGVhZGVyLFxyXG4gICAgICAgIGRhdGE6IGRhdGEsXHJcbiAgICAgICAgdXJsOiBfdGhpcy53aXRoQmFzZVVSTCA/IF90aGlzLmJhc2VVUkwgKyB1cmwgOiB1cmwsXHJcbiAgICAgICAgbWV0aG9kOiBtZXRob2QgfHwgXCJHRVRcIixcclxuICAgICAgICBzdWNjZXNzKHJlczogaHR0cFJlc3BvbnNlKSB7XHJcbiAgICAgICAgICBfdGhpcy5qdWRnZVN0YXR1c0NvZGUocmVzLnN0YXR1c0NvZGUsIHJlamVjdCk7XHJcbiAgICAgICAgICBpZiAodHlwZW9mIHJlcy5kYXRhICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgcmVzb2x2ZShyZXMuZGF0YSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBmYWlsKGUpIHtcclxuICAgICAgICAgIHd4LnNob3dUb2FzdCh7XHJcbiAgICAgICAgICAgIHRpdGxlOiBg5o6l5Y+j6LCD55So5aSx6LSlOiR7ZS5lcnJNc2d9YCxcclxuICAgICAgICAgICAgaWNvbjogXCJub25lXCJcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgY29tcGxldGUoKSB7XHJcbiAgICAgICAgICBzaG93TG9hZGluZyA/IHd4LmhpZGVMb2FkaW5nKCkgOiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGp1ZGdlU3RhdHVzQ29kZShzdGF0dXNDb2RlOiBudW1iZXIsIHJlamVjdDogYW55KSB7XHJcbiAgICBsZXQgaGludDtcclxuICAgIHN3aXRjaCAoc3RhdHVzQ29kZSkge1xyXG4gICAgICBjYXNlIDQwNDpcclxuICAgICAgICBoaW50ID0gXCLmnI3liqHlmajmraPlnKjljYfnuqcuLi5cIjtcclxuICAgICAgICBicmVhaztcclxuICAgICAgY2FzZSAyMDA6XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgaGludCA9IGDmnI3liqHlmajmraPlnKjnu7TmiqTkuK3vvIzor7fnqI3lkI7lho3or5XvvIEg54q25oCB56CB77yaJHtzdGF0dXNDb2RlfWA7XHJcbiAgICB9XHJcbiAgICBpZiAoaGludCkge1xyXG4gICAgICB3eC5zaG93VG9hc3Qoe1xyXG4gICAgICAgIHRpdGxlOiBoaW50LFxyXG4gICAgICAgIGljb246IFwibm9uZVwiXHJcbiAgICAgIH0pO1xyXG4gICAgICByZWplY3QoKTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbmNvbnN0IGZldGNoQXBpID0gbmV3IEFwaUZldGNoKHtcclxuICBiYXNlVVJMOiBCYXNlVXJsLFxyXG4gIHdpdGhCYXNlVVJMOiB0cnVlLFxyXG4gIGhlYWRlcjoge1xyXG4gICAgXCJjb250ZW50LXR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXHJcbiAgICBBdXRob3JpemF0aW9uOiBkZWZhdWx0QXV0aFxyXG4gIH1cclxufSk7XHJcblxyXG5leHBvcnQgeyBmZXRjaEFwaSB9O1xyXG4iXX0=