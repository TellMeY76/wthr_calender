"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const app = getApp();
const api_1 = require("../../configs/api");
let dateWthr = [];
Page({
    hasLocation: false,
    data: {
        formatter: (day) => {
            return day;
        },
        showView: false,
        hasLocation: false,
        canIUse: wx.canIUse('button.open-type.getUserInfo'),
    },
    onLoad() {
        this.showLoadingModal();
        this.getLocation();
    },
    getLocation: function () {
        const _this = this;
        wx.getLocation({
            type: 'wgs84',
            success(res) {
                _this.getWthr(res.latitude, res.longitude);
            },
            fail() {
                _this.getLocationFail();
            }
        });
    },
    getLocationFail() {
        this.setData({
            showView: true,
            formatter: (day) => {
                return day;
            },
        });
        wx.hideLoading();
    },
    showLoadingModal() {
        wx.showLoading({
            title: '日历生成中。。。'
        });
    },
    resetFormatter() {
        const formatter = (day) => {
            const currDay = new Date();
            const wthrDayLen = dateWthr.length || 0;
            if (wthrDayLen) {
                const difValue = Math.ceil((day.date.getTime() - currDay.getTime()) / (1000 * 60 * 60 * 24));
                if (difValue >= 0 && difValue + 1 <= wthrDayLen) {
                    day.topInfo = dateWthr[difValue].topInfo;
                    day.bottomInfo = dateWthr[difValue].bottomInfo;
                }
            }
            return day;
        };
        this.setData({
            hasLocation: true,
            showView: true,
            formatter
        });
        wx.hideLoading();
    },
    getWthr(lat, lon) {
        const _this = this;
        const url = `${api_1.ApiList.GET_WTHR}?location=${lon},${lat}&key=${api_1.GET_WTHR_KEY}`;
        app.fetchApi.fetch("GET", url).then((res) => {
            const forecastList = res.HeWeather6[0].daily_forecast;
            dateWthr = forecastList.map(item => {
                const topInfo = item.cond_txt_n;
                const bottomInfo = `${item.tmp_min}℃~${item.tmp_max}℃`;
                return { topInfo, bottomInfo };
            });
            _this.resetFormatter();
        });
    },
    openSetting: function () {
        const _this = this;
        wx.openSetting({
            success(res) {
                const auth = res.authSetting;
                console.log('userLocation', auth["scope.userLocation"]);
                if (auth["scope.userLocation"]) {
                    _this.getLocation();
                }
                else {
                    _this.getLocationFail();
                }
            }
        });
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUNBLE1BQU0sR0FBRyxHQUFHLE1BQU0sRUFBYyxDQUFBO0FBQ2hDLDJDQUEwRDtBQUkxRCxJQUFJLFFBQVEsR0FBa0IsRUFBRSxDQUFDO0FBRWpDLElBQUksQ0FBQztJQUNILFdBQVcsRUFBRSxLQUFLO0lBQ2xCLElBQUksRUFBRTtRQUNKLFNBQVMsRUFBRSxDQUFDLEdBQWdCLEVBQUUsRUFBRTtZQUM5QixPQUFPLEdBQUcsQ0FBQztRQUNiLENBQUM7UUFDRCxRQUFRLEVBQUUsS0FBSztRQUNmLFdBQVcsRUFBRSxLQUFLO1FBQ2xCLE9BQU8sRUFBRSxFQUFFLENBQUMsT0FBTyxDQUFDLDhCQUE4QixDQUFDO0tBQ3BEO0lBRUQsTUFBTTtRQUNKLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO1FBQ3hCLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUNyQixDQUFDO0lBRUQsV0FBVyxFQUFFO1FBQ1gsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFBO1FBQ2xCLEVBQUUsQ0FBQyxXQUFXLENBQUM7WUFDYixJQUFJLEVBQUUsT0FBTztZQUNiLE9BQU8sQ0FBQyxHQUFHO2dCQUNULEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUM7WUFDN0MsQ0FBQztZQUNELElBQUk7Z0JBQ0YsS0FBSyxDQUFDLGVBQWUsRUFBRSxDQUFBO1lBQ3pCLENBQUM7U0FDRixDQUFDLENBQUE7SUFDSixDQUFDO0lBRUQsZUFBZTtRQUNiLElBQUksQ0FBQyxPQUFPLENBQUM7WUFDWCxRQUFRLEVBQUUsSUFBSTtZQUNkLFNBQVMsRUFBRSxDQUFDLEdBQWdCLEVBQUUsRUFBRTtnQkFDOUIsT0FBTyxHQUFHLENBQUM7WUFDYixDQUFDO1NBQ0YsQ0FBQyxDQUFBO1FBQ0YsRUFBRSxDQUFDLFdBQVcs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cHA8SUFwcE9wdGlvbj4oKVxuaW1wb3J0IHsgQXBpTGlzdCwgR0VUX1dUSFJfS0VZIH0gZnJvbSBcIi4uLy4uL2NvbmZpZ3MvYXBpXCI7XG5pbXBvcnQgeyBDYWxlbmRhckRheSB9IGZyb20gXCIuLi8uLi9jb25maWdzL2NhbGVuZGVyXCI7XG5pbXBvcnQgeyBIZVdlYXRoZXIgfSBmcm9tIFwiLi4vLi4vY29uZmlncy93ZWF0aGVyXCJcblxubGV0IGRhdGVXdGhyOiBDYWxlbmRhckRheVtdID0gW107XG5cblBhZ2Uoe1xuICBoYXNMb2NhdGlvbjogZmFsc2UsXG4gIGRhdGE6IHtcbiAgICBmb3JtYXR0ZXI6IChkYXk6IENhbGVuZGFyRGF5KSA9PiB7XG4gICAgICByZXR1cm4gZGF5O1xuICAgIH0sXG4gICAgc2hvd1ZpZXc6IGZhbHNlLFxuICAgIGhhc0xvY2F0aW9uOiBmYWxzZSxcbiAgICBjYW5JVXNlOiB3eC5jYW5JVXNlKCdidXR0b24ub3Blbi10eXBlLmdldFVzZXJJbmZvJyksXG4gIH0sXG5cbiAgb25Mb2FkKCkge1xuICAgIHRoaXMuc2hvd0xvYWRpbmdNb2RhbCgpO1xuICAgIHRoaXMuZ2V0TG9jYXRpb24oKTtcbiAgfSxcblxuICBnZXRMb2NhdGlvbjogZnVuY3Rpb24gKCkge1xuICAgIGNvbnN0IF90aGlzID0gdGhpc1xuICAgIHd4LmdldExvY2F0aW9uKHtcbiAgICAgIHR5cGU6ICd3Z3M4NCcsXG4gICAgICBzdWNjZXNzKHJlcykge1xuICAgICAgICBfdGhpcy5nZXRXdGhyKHJlcy5sYXRpdHVkZSwgcmVzLmxvbmdpdHVkZSk7XG4gICAgICB9LFxuICAgICAgZmFpbCgpIHtcbiAgICAgICAgX3RoaXMuZ2V0TG9jYXRpb25GYWlsKClcbiAgICAgIH1cbiAgICB9KVxuICB9LFxuXG4gIGdldExvY2F0aW9uRmFpbCgpIHtcbiAgICB0aGlzLnNldERhdGEoe1xuICAgICAgc2hvd1ZpZXc6IHRydWUsXG4gICAgICBmb3JtYXR0ZXI6IChkYXk6IENhbGVuZGFyRGF5KSA9PiB7XG4gICAgICAgIHJldHVybiBkYXk7XG4gICAgICB9LFxuICAgIH0pXG4gICAgd3guaGlkZUxvYWRpbmcoKVxuICB9LFxuXG4gIHNob3dMb2FkaW5nTW9kYWwoKSB7XG4gICAgd3guc2hvd0xvYWRpbmcoe1xuICAgICAgdGl0bGU6ICfml6XljobnlJ/miJDkuK3jgILjgILjgIInXG4gICAgfSlcbiAgfSxcblxuICByZXNldEZvcm1hdHRlcigpIHtcbiAgICBjb25zdCBmb3JtYXR0ZXIgPSAoZGF5OiBDYWxlbmRhckRheSkgPT4ge1xuICAgICAgY29uc3QgY3VyckRheSA9IG5ldyBEYXRlKCk7XG4gICAgICBjb25zdCB3dGhyRGF5TGVuID0gZGF0ZVd0aHIubGVuZ3RoIHx8IDA7XG4gICAgICBpZiAod3RockRheUxlbikge1xuICAgICAgICBjb25zdCBkaWZWYWx1ZSA9IE1hdGguY2VpbCgoZGF5LmRhdGUuZ2V0VGltZSgpIC0gY3VyckRheS5nZXRUaW1lKCkpIC8gKDEwMDAgKiA2MCAqIDYwICogMjQpKTtcbiAgICAgICAgaWYgKGRpZlZhbHVlID49IDAgJiYgZGlmVmFsdWUgKyAxIDw9IHd0aHJEYXlMZW4pIHtcbiAgICAgICAgICBkYXkudG9wSW5mbyA9IGRhdGVXdGhyW2RpZlZhbHVlXS50b3BJbmZvXG4gICAgICAgICAgZGF5LmJvdHRvbUluZm8gPSBkYXRlV3RocltkaWZWYWx1ZV0uYm90dG9tSW5mb1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gZGF5O1xuICAgIH1cbiAgICB0aGlzLnNldERhdGEoe1xuICAgICAgaGFzTG9jYXRpb246IHRydWUsXG4gICAgICBzaG93VmlldzogdHJ1ZSxcbiAgICAgIGZvcm1hdHRlclxuICAgIH0pXG4gICAgd3guaGlkZUxvYWRpbmcoKVxuICB9LFxuXG4gIGdldFd0aHIobGF0OiBudW1iZXIsIGxvbjogbnVtYmVyKSB7XG4gICAgY29uc3QgX3RoaXMgPSB0aGlzO1xuICAgIGNvbnN0IHVybCA9IGAke0FwaUxpc3QuR0VUX1dUSFJ9P2xvY2F0aW9uPSR7bG9ufSwke2xhdH0ma2V5PSR7R0VUX1dUSFJfS0VZfWBcbiAgICBhcHAuZmV0Y2hBcGkuZmV0Y2goXCJHRVRcIiwgdXJsKS50aGVuKChyZXM6IEhlV2VhdGhlcikgPT4ge1xuICAgICAgY29uc3QgZm9yZWNhc3RMaXN0ID0gcmVzLkhlV2VhdGhlcjZbMF0uZGFpbHlfZm9yZWNhc3Q7XG4gICAgICBkYXRlV3RociA9IDxDYWxlbmRhckRheVtdPmZvcmVjYXN0TGlzdC5tYXAoaXRlbSA9PiB7XG4gICAgICAgIGNvbnN0IHRvcEluZm8gPSBpdGVtLmNvbmRfdHh0X25cbiAgICAgICAgY29uc3QgYm90dG9tSW5mbyA9IGAke2l0ZW0udG1wX21pbn3ihIN+JHtpdGVtLnRtcF9tYXh94oSDYFxuICAgICAgICByZXR1cm4geyB0b3BJbmZvLCBib3R0b21JbmZvIH1cbiAgICAgIH0pXG4gICAgICBfdGhpcy5yZXNldEZvcm1hdHRlcigpXG4gICAgfSlcbiAgfSxcblxuICBvcGVuU2V0dGluZzogZnVuY3Rpb24gKCkge1xuICAgIGNvbnN0IF90aGlzID0gdGhpc1xuICAgIHd4Lm9wZW5TZXR0aW5nKHtcbiAgICAgIHN1Y2Nlc3MocmVzKSB7XG4gICAgICAgIGNvbnN0IGF1dGggPSByZXMuYXV0aFNldHRpbmdcbiAgICAgICAgY29uc29sZS5sb2coJ3VzZXJMb2NhdGlvbicsIGF1dGhbXCJzY29wZS51c2VyTG9jYXRpb25cIl0pXG4gICAgICAgIGlmIChhdXRoW1wic2NvcGUudXNlckxvY2F0aW9uXCJdKSB7XG4gICAgICAgICAgX3RoaXMuZ2V0TG9jYXRpb24oKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBfdGhpcy5nZXRMb2NhdGlvbkZhaWwoKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG59KVxuIl19